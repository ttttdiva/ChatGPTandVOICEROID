From 87fc0723c5e28a35cb363fcb523c718b82a6c67a Mon Sep 17 00:00:00 2001
From: ttttdiva <avaitelinngu@outlook.com>
Date: Sun, 19 Nov 2023 01:23:15 +0900
Subject: [PATCH] =?UTF-8?q?voice=5Fclient.py=E3=81=AB=E5=A4=89=E6=9B=B4?=
 =?UTF-8?q?=E3=82=92=E5=8A=A0=E3=81=88=E3=82=8B?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 voice_client.py | 23 +++++++++++++++--------
 1 file changed, 15 insertions(+), 8 deletions(-)

diff --git a/voice_client.py b/voice_client.py
index 110977d..b17be80 100644
--- a/voice_client.py
+++ b/voice_client.py
@@ -700,7 +700,7 @@ class VoiceClient(VoiceProtocol):
 
         self.decoder.decode(data)
 
-    def start_recording(self, sink, callback, *args):
+    def start_recording(self, sink, callback, *args, sync_start: bool = False):
         """The bot will begin recording audio from the current voice channel it is in.
         This function uses a thread so the current code line will not be stopped.
         Must be in a voice channel to use.
@@ -716,6 +716,9 @@ class VoiceClient(VoiceProtocol):
             A function which is called after the bot has stopped recording.
         *args:
             Args which will be passed to the callback function.
+        sync_start: :class:`bool`
+            If True, the recordings of subsequent users will start with silence.
+            This is useful for recording audio just as it was heard.
 
         Raises
         ------
@@ -738,6 +741,7 @@ class VoiceClient(VoiceProtocol):
         self.decoder = opus.DecodeManager(self)
         self.decoder.start()
         self.recording = True
+        self.sync_start = sync_start
         self.sink = sink
         sink.init(self)
 
@@ -796,8 +800,10 @@ class VoiceClient(VoiceProtocol):
         # it by user, handles pcm files and
         # silence that should be added.
 
-        self.user_timestamps = {}
+        self.user_timestamps: dict[int, tuple[int, float]] = {}
         self.starting_time = time.perf_counter()
+        self.recording_stopped = threading.Event()  # 録音停止フラグ
+
         while self.recording:
             ready, _, err = select.select([self.socket], [], [self.socket], 0.01)
             if not ready:
@@ -808,16 +814,17 @@ class VoiceClient(VoiceProtocol):
             try:
                 data = self.socket.recv(4096)
             except OSError:
-                self.stop_recording()
-                continue
+                break  # ソケットエラー発生時にループを抜ける
 
-            self.unpack_audio(data)
+            processed_data = self.unpack_audio(data)
+            if processed_data is not None:
+                sink.write(processed_data, None)
+
+        self.recording_stopped.set()  # 録音停止フラグをセット
 
         self.stopping_time = time.perf_counter()
         self.sink.cleanup()
-        callback = asyncio.run_coroutine_threadsafe(
-            callback(self.sink, *args), self.loop
-        )
+        callback = asyncio.run_coroutine_threadsafe(callback(sink, *args), self.loop)
         result = callback.result()
 
         if result is not None:
-- 
2.40.1.windows.1

